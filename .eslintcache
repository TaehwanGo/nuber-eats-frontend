[{"C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts":"1","C:\\github\\nuber-eats-frontend\\src\\index.tsx":"2","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx":"3","C:\\github\\nuber-eats-frontend\\src\\apollo.ts":"4","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx":"5","C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx":"6","C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx":"7","C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx":"8","C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx":"9","C:\\github\\nuber-eats-frontend\\src\\constants.ts":"10","C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx":"11","C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx":"12","C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx":"13","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx":"14","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx":"15","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx":"16","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx":"17","C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx":"18","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx":"19","C:\\github\\nuber-eats-frontend\\src\\fragment.ts":"20","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx":"21","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx":"22","C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx":"23","C:\\github\\nuber-eats-frontend\\src\\components\\app.tsx":"24","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx":"25","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-restaurants.tsx":"26","C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts":"27"},{"size":425,"mtime":1611520125186,"results":"28","hashOfConfig":"29"},{"size":843,"mtime":1612093536589,"results":"30","hashOfConfig":"29"},{"size":641,"mtime":1611688050087,"results":"31","hashOfConfig":"29"},{"size":1518,"mtime":1611685048420,"results":"32","hashOfConfig":"29"},{"size":2238,"mtime":1612443786108,"results":"33","hashOfConfig":"29"},{"size":4139,"mtime":1611777596643,"results":"34","hashOfConfig":"29"},{"size":4710,"mtime":1612118643018,"results":"35","hashOfConfig":"29"},{"size":339,"mtime":1612108218340,"results":"36","hashOfConfig":"29"},{"size":485,"mtime":1611668239414,"results":"37","hashOfConfig":"29"},{"size":228,"mtime":1611777499861,"results":"38","hashOfConfig":"29"},{"size":582,"mtime":1611831445403,"results":"39","hashOfConfig":"29"},{"size":1662,"mtime":1612297149187,"results":"40","hashOfConfig":"29"},{"size":288,"mtime":1612103858732,"results":"41","hashOfConfig":"29"},{"size":2019,"mtime":1611831488074,"results":"42","hashOfConfig":"29"},{"size":3240,"mtime":1611831458001,"results":"43","hashOfConfig":"29"},{"size":824,"mtime":1611862534335,"results":"44","hashOfConfig":"29"},{"size":3664,"mtime":1612010175286,"results":"45","hashOfConfig":"29"},{"size":521,"mtime":1611858079596,"results":"46","hashOfConfig":"29"},{"size":3365,"mtime":1612002430417,"results":"47","hashOfConfig":"29"},{"size":364,"mtime":1611860050449,"results":"48","hashOfConfig":"29"},{"size":5030,"mtime":1612002502994,"results":"49","hashOfConfig":"29"},{"size":1616,"mtime":1611866406526,"results":"50","hashOfConfig":"29"},{"size":1144,"mtime":1612002336852,"results":"51","hashOfConfig":"29"},{"size":846,"mtime":1612093514775,"results":"52","hashOfConfig":"29"},{"size":1319,"mtime":1612443727330,"results":"53","hashOfConfig":"29"},{"size":2193,"mtime":1612445781574,"results":"54","hashOfConfig":"29"},{"size":1264,"mtime":1612444517624,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"npjdl",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"61"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"61"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"94"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"61"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts",[],["122","123"],"C:\\github\\nuber-eats-frontend\\src\\index.tsx",[],["124","125"],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\apollo.ts",[],["126","127"],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx",[],["128","129"],"C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx",["130"],"C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\constants.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx",["131"],"C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx",["132","133","134","135"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from '../../__generated__/verifyEmail';\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const { data: userData, refetch } = useMe();\n  const client = useApolloClient();\n  const history = useHistory();\n  const onCompleted = async (data: verifyEmail) => {\n    const {\n      verifyEmail: { ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      client.writeFragment({\n        id: `User:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      // await refetch();\n      history.push('/');\n    }\n  };\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    },\n  );\n  //   const location = useLocation();\n  useEffect(() => {\n    // 방법 1. window.location.href 에서 url을 가져올 수도 있음\n    // console.log(window.location.href.split(\"code=\")[1]);\n    // 방법 2. router로 부터 가져오기\n    // console.log(location);\n    const [_, code] = window.location.href.split('code=');\n    verifyEmail({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <Helmet>\n        <title>Verify Email | Nuber Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming email...</h2>\n      <h4 className=\"text-gray-700 text-sm\">\n        Please wait, don't close this page...\n      </h4>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx",["136"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { EMAIL_REGEX } from '../../constants';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  editProfile,\n  editProfileVariables,\n} from '../../__generated__/editProfile';\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const EditProfile = () => {\n  const { data: userData, refetch } = useMe();\n  const { register, handleSubmit, getValues, formState } = useForm<IFormProps>({\n    defaultValues: {\n      email: userData?.me.email,\n    },\n    mode: 'onChange',\n  });\n  const client = useApolloClient();\n  const onCompleted = async (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      //update cache\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `User:${id}`,\n          fragment: gql`\n            fragment EditedUser on User {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n      //   await refetch();\n    }\n  };\n  const [editProfile, { loading }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, { onCompleted });\n\n  const onSubmit = () => {\n    // getValues 후 edit profile mutation을 call\n    // 그리고 cache도 update : 나중에 다른 스크린에 필요할 수도 있으므로\n    const { email, password } = getValues();\n    editProfile({\n      variables: {\n        input: {\n          email,\n          ...(password !== '' && { password }), // 아무것도 입력안해서 password에 \"\"들어간 경우 password 항목자체가 없게 해서 \"\"으로 password가 변경되는 것을 막아줌\n        },\n      },\n    });\n  };\n  return (\n    <div className=\"w-full flex flex-col px-5 items-center\">\n      <Helmet>\n        <title>Edit Profile | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm \">\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Edit Profile\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            ref={register({\n              pattern: EMAIL_REGEX,\n            })}\n            name=\"email\"\n            className=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n          <input\n            ref={register}\n            name=\"password\"\n            className=\"input\"\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <Button\n            loading={loading}\n            canClick={formState.isValid}\n            actionText=\"Save Profile\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx",[],["137","138"],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx",["139","140","141"],"import { gql, useLazyQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Loader from 'react-loader-spinner';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Pagination } from '../../components/pagination';\nimport { Restaurant } from '../../components/restaurant';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  searchRestaurantInput,\n  searchRestaurantInputVariables,\n} from '../../__generated__/searchRestaurantInput';\n\nconst SEARCH_RESTAURANTS = gql`\n  query searchRestaurantInput($input: SearchRestaurantInput!) {\n    searchRestaurantByName(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n  const [page, setPage] = useState(1); // default value : 1\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const location = useLocation();\n  const history = useHistory();\n  // LazyQuery는 조건부 query를 가능하게 함\n  const [callQuery, { loading, data, called }] = useLazyQuery<\n    searchRestaurantInput,\n    searchRestaurantInputVariables\n  >(SEARCH_RESTAURANTS); // callQuery()를 실행해야만 data를 얻을 수 있음\n  useEffect(() => {\n    const [_, query] = location.search.split('?term=');\n    if (!query) {\n      return history.replace('/');\n    }\n    // 방법1. searchTerm을 state로 설정 할 수 있음\n    // 방법2. state설정 없이 Lazy Query를 만드는 것(우리가 할 방법)\n    callQuery({\n      variables: {\n        input: {\n          page,\n          query,\n        },\n      },\n    });\n    // console.log(loading, data, called); // called는 query가 실행됐는지 안됐는지 알려줌\n  }, [page]);\n\n  return (\n    <section className=\"flex w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n      <Helmet>\n        <title>Search | Nuber Eats</title>\n      </Helmet>\n      <nav className=\"hidden md:block min-w-max py-4\">\n        <div className=\"w-64 max-h-screen sticky top-0\">\n          {!loading && (\n            <>\n              <h1 className=\"text-3xl font-semibold\">{`\"${\n                location.search.split('?term=')[1]\n              }\"`}</h1>\n              <h2 className=\"text-base mt-2\">{`${data?.searchRestaurantByName.totalResults} Restaurants`}</h2>\n            </>\n          )}\n          {/* Sort, Price range, ... we will see later */}\n        </div>\n      </nav>\n      <main className=\"w-full\">\n        {loading && (\n          <div className=\"mt-6 mb-4 py-32 flex justify-center\">\n            <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n          </div>\n        )}\n        {!loading && (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-x-5 gap-y-8 py-4\">\n            {data?.searchRestaurantByName.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        )}\n\n        <Pagination\n          page={page}\n          totalPages={data?.searchRestaurantByName.totalPages}\n          onNextPageClick={onNextPageClick}\n          onPrevPageClick={onPrevPageClick}\n        />\n        {/* <div className=\"h-screen\">sticky 확인용 div</div> */}\n      </main>\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx",["142","143"],"import { gql, useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Loader from 'react-loader-spinner';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Pagination } from '../../components/pagination';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  categoryQuery,\n  categoryQueryVariables,\n} from '../../__generated__/categoryQuery';\n\nconst CATEGORY_QUERY = gql`\n  query categoryQuery($input: CategoryInput!) {\n    category(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n      category {\n        ...CategoryParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n  slug: string;\n}\n\nexport const Category = () => {\n  //   const location = useLocation(); // router에서 /:slug 를 붙여서 parameter를 가져올 수 있으므로 useParams를 쓰는게 더 좋음\n  //   useEffect(() => {\n  //     console.log(location);\n  //   }, [location]);\n  const params = useParams<ICategoryParams>();\n  const [page, setPage] = useState(1); // default value : 1\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const { data, loading } = useQuery<categoryQuery, categoryQueryVariables>(\n    CATEGORY_QUERY,\n    {\n      variables: {\n        input: {\n          page,\n          slug: params.slug,\n        },\n      },\n    },\n  );\n  console.log(data);\n  //\n  return (\n    <section className=\"flex w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n      <Helmet>\n        <title>Category | Nuber Eats</title>\n      </Helmet>\n      <nav className=\"hidden md:block min-w-max py-4\">\n        <div className=\"w-64 max-h-screen sticky top-0\">\n          {data?.category.category && (\n            <>\n              <h1 className=\"text-3xl font-semibold\">{`\"${data.category.category.name}\"`}</h1>\n              <h2 className=\"text-base mt-2\">{`${data.category.category.restaurantCount} Restaurants`}</h2>\n            </>\n          )}\n          {/* Sort, Price range, ... we will see later */}\n        </div>\n      </nav>\n      <main className=\"w-full\">\n        {loading && (\n          <div className=\"mt-6 mb-4 py-32 flex justify-center\">\n            <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n          </div>\n        )}\n        {!loading && (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-x-5 gap-y-8 py-4\">\n            {data?.category.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        )}\n\n        <Pagination\n          page={page}\n          totalPages={data?.category.totalPages}\n          onNextPageClick={onNextPageClick}\n          onPrevPageClick={onPrevPageClick}\n        />\n        {/* <div className=\"h-screen\">sticky 확인용 div</div> */}\n      </main>\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\fragment.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx",["144","145","146"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  faCaretSquareLeft,\n  faCaretSquareRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Categories } from '../../components/categories';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  restaurantsPageQuery,\n  restaurantsPageQueryVariables,\n} from '../../__generated__/restaurantsPageQuery';\nimport Loader from 'react-loader-spinner';\nimport { allCategoriesQuery } from '../../__generated__/allCategoriesQuery';\nimport { Pagination } from '../../components/pagination';\n\nconst CATEGORIES_QUERY = gql`\n  query allCategoriesQuery {\n    allCategories {\n      ok\n      error\n      categories {\n        ...CategoryParts\n      }\n    }\n  }\n  ${CATEGORY_FRAGMENT}\n`;\n\nconst RESTAURANTS_QUERY = gql`\n  query restaurantsPageQuery($input: RestaurantsInput!) {\n    seeRestaurantsByPage(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\ninterface IFormProps {\n  searchTerm: string;\n}\nexport const Restaurants = () => {\n  const [page, setPage] = useState(1); // default value : 1\n\n  const {\n    data: allCategories,\n    loading: loadingCategories,\n  } = useQuery<allCategoriesQuery>(CATEGORIES_QUERY);\n\n  const { data, loading } = useQuery<\n    restaurantsPageQuery,\n    restaurantsPageQueryVariables\n  >(RESTAURANTS_QUERY, {\n    variables: {\n      input: {\n        // 우리가 state(page)를 변경하면 Query는 state에 depend하기 때문에 Query의 variable또한 바뀜 => re-render\n        page, // page: page(from state hook)\n      },\n    },\n  });\n  //   console.log(data);\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const { register, handleSubmit, getValues } = useForm<IFormProps>();\n  const history = useHistory(); // for redirect\n\n  const onSearchSubmit = () => {\n    const { searchTerm } = getValues();\n    history.push({\n      pathname: '/search',\n      search: `?term=${searchTerm}`,\n      //   state: {\n      //     searchTerm, // 이런식으로 url에 노출시키지 않고 원하는 데이터를 보낼 수 있음 : 브라우저 메모리에 저장하기 때문에 새로고침해도 state에 남아 있음\n      //   },\n    });\n  };\n\n  return (\n    <section>\n      <Helmet>\n        <title>Home | Nuber Eats</title>\n      </Helmet>\n      <form\n        onSubmit={handleSubmit(onSearchSubmit)}\n        className=\"bg-gray-800 w-full py-20 flex items-center justify-center px-5\"\n      >\n        <input\n          ref={register({ required: true })}\n          name=\"searchTerm\"\n          type=\"Search\"\n          className=\"input w-full max-w-screen-sm rounded-md border-0\"\n          placeholder=\"Search restaurants...\"\n        />\n      </form>\n      {loadingCategories && (\n        <div className=\"py-10 flex justify-center\">\n          <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n        </div>\n      )}\n      {!loadingCategories && (\n        <div className=\"px-5 xl:px-0 max-w-screen-2xl mx-auto\">\n          <div className=\"flex justify-around max-w-sm mx-auto mt-8 \">\n            {allCategories?.allCategories.categories?.map(category => (\n              <Link key={category.id} to={`/category/${category.slug}`}>\n                <Categories\n                  key={category.id}\n                  id={category.id + ''}\n                  coverImage={\n                    category.coverImage ? category.coverImage : undefined\n                  }\n                  name={category.name}\n                />\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n      {loading && (\n        <div className=\"mt-12 py-32 flex justify-center\">\n          <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n        </div>\n      )}\n      {!loading && (\n        <div className=\"px-5 xl:px-0 max-w-screen-xl mx-auto w-full\">\n          <div className=\"grid md:grid-cols-3 gap-x-5 gap-y-10 mt-10\">\n            {data?.seeRestaurantsByPage.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      <Pagination\n        page={page}\n        totalPages={data?.seeRestaurantsByPage.totalPages}\n        onNextPageClick={onNextPageClick}\n        onPrevPageClick={onPrevPageClick}\n      />\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx",["147"],"import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  restaurantDetailQuery,\n  restaurantDetailQueryVariables,\n} from '../../__generated__/restaurantDetailQuery';\n\nconst RESTAURANT_QUERY = gql`\n  query restaurantDetailQuery($input: RestaurantInput!) {\n    findRestaurantById(input: $input) {\n      ok\n      error\n      restaurant {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IRestaurantParams {\n  id: string;\n}\n\nexport const RestaurantDetail = () => {\n  const params = useParams<IRestaurantParams>();\n  const { loading, data } = useQuery<\n    restaurantDetailQuery,\n    restaurantDetailQueryVariables\n  >(RESTAURANT_QUERY, {\n    variables: {\n      input: {\n        restaurantId: +params.id, // parseInt(params.id),\n      },\n    },\n  });\n  console.log(data);\n  return (\n    <div>\n      <div\n        className=\"bg-gray-300 bg-center bg-cover py-32 md:py-40 lg:py-52\"\n        style={{\n          backgroundImage: `url(${data?.findRestaurantById.restaurant?.coverImage})`,\n        }}\n      >\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n          <div className=\"max-w-screen-sm py-4 text-white\">\n            <h4 className=\"text-4xl mb-2\">\n              {data?.findRestaurantById.restaurant?.name}\n            </h4>\n            <h5>{data?.findRestaurantById.restaurant?.category?.name}</h5>\n            <h5>{data?.findRestaurantById.restaurant?.address}</h5>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",["148","149"],"C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\app.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-restaurants.tsx",["150","151","152"],"C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"153","replacedBy":"157"},{"ruleId":"155","replacedBy":"158"},{"ruleId":"153","replacedBy":"159"},{"ruleId":"155","replacedBy":"160"},{"ruleId":"153","replacedBy":"161"},{"ruleId":"155","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":37,"column":5,"nodeType":"165","messageId":"166","endLine":37,"endColumn":10},{"ruleId":"163","severity":1,"message":"167","line":11,"column":11,"nodeType":"165","messageId":"166","endLine":11,"endColumn":15},{"ruleId":"163","severity":1,"message":"168","line":4,"column":22,"nodeType":"165","messageId":"166","endLine":4,"endColumn":33},{"ruleId":"163","severity":1,"message":"169","line":21,"column":27,"nodeType":"165","messageId":"166","endLine":21,"endColumn":34},{"ruleId":"163","severity":1,"message":"170","line":56,"column":12,"nodeType":"165","messageId":"166","endLine":56,"endColumn":13},{"ruleId":"171","severity":1,"message":"172","line":64,"column":6,"nodeType":"173","endLine":64,"endColumn":8,"suggestions":"174"},{"ruleId":"163","severity":1,"message":"169","line":28,"column":27,"nodeType":"165","messageId":"166","endLine":28,"endColumn":34},{"ruleId":"153","replacedBy":"175"},{"ruleId":"155","replacedBy":"176"},{"ruleId":"163","severity":1,"message":"177","line":36,"column":38,"nodeType":"165","messageId":"166","endLine":36,"endColumn":44},{"ruleId":"163","severity":1,"message":"170","line":41,"column":12,"nodeType":"165","messageId":"166","endLine":41,"endColumn":13},{"ruleId":"171","severity":1,"message":"178","line":56,"column":6,"nodeType":"173","endLine":56,"endColumn":12,"suggestions":"179"},{"ruleId":"163","severity":1,"message":"180","line":2,"column":17,"nodeType":"165","messageId":"166","endLine":2,"endColumn":26},{"ruleId":"163","severity":1,"message":"168","line":5,"column":10,"nodeType":"165","messageId":"166","endLine":5,"endColumn":21},{"ruleId":"163","severity":1,"message":"181","line":3,"column":3,"nodeType":"165","messageId":"166","endLine":3,"endColumn":20},{"ruleId":"163","severity":1,"message":"182","line":4,"column":3,"nodeType":"165","messageId":"166","endLine":4,"endColumn":21},{"ruleId":"163","severity":1,"message":"183","line":6,"column":10,"nodeType":"165","messageId":"166","endLine":6,"endColumn":25},{"ruleId":"163","severity":1,"message":"184","line":29,"column":11,"nodeType":"165","messageId":"166","endLine":29,"endColumn":18},{"ruleId":"153","replacedBy":"185"},{"ruleId":"155","replacedBy":"186"},{"ruleId":"163","severity":1,"message":"187","line":27,"column":10,"nodeType":"165","messageId":"166","endLine":27,"endColumn":38},{"ruleId":"163","severity":1,"message":"167","line":27,"column":42,"nodeType":"165","messageId":"166","endLine":27,"endColumn":46},{"ruleId":"163","severity":1,"message":"188","line":35,"column":5,"nodeType":"165","messageId":"166","endLine":35,"endColumn":11},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],["189"],["190"],["189"],["190"],["189"],["190"],"@typescript-eslint/no-unused-vars","'watch' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'useLocation' is defined but never used.","'refetch' is assigned a value but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","ArrayExpression",["191"],["189"],["190"],"'called' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callQuery', 'history', and 'location.search'. Either include them or remove the dependency array.",["192"],"'useEffect' is defined but never used.","'faCaretSquareLeft' is defined but never used.","'faCaretSquareRight' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'loading' is assigned a value but never used.",["189"],["190"],"'callCreateRestaurantMutation' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [verifyEmail]",{"range":"197","text":"198"},"Update the dependencies array to be: [callQuery, history, location.search, page]",{"range":"199","text":"200"},[1617,1619],"[verifyEmail]",[1819,1825],"[callQuery, history, location.search, page]"]