[{"C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts":"1","C:\\github\\nuber-eats-frontend\\src\\index.tsx":"2","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx":"3","C:\\github\\nuber-eats-frontend\\src\\apollo.ts":"4","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx":"5","C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx":"6","C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx":"7","C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx":"8","C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx":"9","C:\\github\\nuber-eats-frontend\\src\\constants.ts":"10","C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx":"11","C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx":"12","C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx":"13","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx":"14","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx":"15","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx":"16","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx":"17","C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx":"18","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx":"19","C:\\github\\nuber-eats-frontend\\src\\fragment.ts":"20","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx":"21","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx":"22","C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx":"23","C:\\github\\nuber-eats-frontend\\src\\components\\app.tsx":"24","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx":"25","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-restaurants.tsx":"26","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurant.tsx":"27","C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts":"28","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-dish.tsx":"29"},{"size":425,"mtime":1611520125186,"results":"30","hashOfConfig":"31"},{"size":843,"mtime":1612093536589,"results":"32","hashOfConfig":"31"},{"size":641,"mtime":1611688050087,"results":"33","hashOfConfig":"31"},{"size":1518,"mtime":1611685048420,"results":"34","hashOfConfig":"31"},{"size":2647,"mtime":1612543158484,"results":"35","hashOfConfig":"31"},{"size":4172,"mtime":1612113428800,"results":"36","hashOfConfig":"31"},{"size":4710,"mtime":1612118643018,"results":"37","hashOfConfig":"31"},{"size":339,"mtime":1612108218340,"results":"38","hashOfConfig":"31"},{"size":485,"mtime":1612110563001,"results":"39","hashOfConfig":"31"},{"size":228,"mtime":1611777499861,"results":"40","hashOfConfig":"31"},{"size":582,"mtime":1611831445403,"results":"41","hashOfConfig":"31"},{"size":1662,"mtime":1612297149187,"results":"42","hashOfConfig":"31"},{"size":288,"mtime":1612103858732,"results":"43","hashOfConfig":"31"},{"size":2019,"mtime":1611831488074,"results":"44","hashOfConfig":"31"},{"size":3240,"mtime":1611831458001,"results":"45","hashOfConfig":"31"},{"size":825,"mtime":1612535883892,"results":"46","hashOfConfig":"31"},{"size":3664,"mtime":1612010175286,"results":"47","hashOfConfig":"31"},{"size":521,"mtime":1611858079596,"results":"48","hashOfConfig":"31"},{"size":3365,"mtime":1612002430417,"results":"49","hashOfConfig":"31"},{"size":583,"mtime":1612538778291,"results":"50","hashOfConfig":"31"},{"size":5030,"mtime":1612002502994,"results":"51","hashOfConfig":"31"},{"size":1616,"mtime":1611956885324,"results":"52","hashOfConfig":"31"},{"size":1144,"mtime":1612002336852,"results":"53","hashOfConfig":"31"},{"size":846,"mtime":1612093514775,"results":"54","hashOfConfig":"31"},{"size":1995,"mtime":1612470497319,"results":"55","hashOfConfig":"31"},{"size":5362,"mtime":1612471623362,"results":"56","hashOfConfig":"31"},{"size":2075,"mtime":1612542715294,"results":"57","hashOfConfig":"31"},{"size":1711,"mtime":1612540025515,"results":"58","hashOfConfig":"31"},{"size":5589,"mtime":1612615343919,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"npjdl",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"79"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"71"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts",[],["133","134"],"C:\\github\\nuber-eats-frontend\\src\\index.tsx",[],["135","136"],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx",[],["137","138"],"C:\\github\\nuber-eats-frontend\\src\\apollo.ts",[],["139","140"],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx",["141"],"import { gql, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { FormError } from '../components/form-error';\nimport nuberLogo from '../images/logo.svg'; // svg는 import 가능\nimport { Button } from '../components/button';\nimport { Link, useHistory } from 'react-router-dom';\nimport { UserRole } from '../__generated__/globalTypes';\nimport {\n  createAccountMutation,\n  createAccountMutationVariables,\n} from '../__generated__/createAccountMutation';\nimport { EMAIL_REGEX } from '../constants';\n\n// 아래 mutation이름 (PotatoMutation)은 백엔드로 가는게 아니라 프론트에서 쓰여질 것임(Apollo)\n// Apollo는 이 변수들을 살펴보고 내가 작성한 변수들을 가지고 mutation을 만들음\nexport const CREATE_ACCOUNT_MUTATION = gql`\n  mutation createAccountMutation($createAccount: CreateAccountInput!) {\n    createAccount(input: $createAccount) {\n      ok\n      error\n    }\n  }\n`;\n\ninterface ICreateAccountForm {\n  email: string;\n  password: string;\n  role: UserRole;\n}\n\nexport const CreateAccount = () => {\n  const {\n    register,\n    getValues,\n    watch,\n    errors,\n    handleSubmit,\n    formState,\n  } = useForm<ICreateAccountForm>({\n    mode: 'onChange',\n    defaultValues: {\n      role: UserRole.Client,\n    },\n  }); // useForm + useMutation => awesome !\n  const history = useHistory();\n  const onCompleted = (data: createAccountMutation) => {\n    const {\n      createAccount: { ok },\n    } = data;\n    if (ok) {\n      // redirect to login page : useHistory\n      alert('Account Created! Log in now!');\n      history.push('/');\n    }\n  };\n  // useMutation의 결과 array의 0번째, 함수(loginMutation)는 반드시 호출해줘야 함 : 그래야 backend로 mutation이 전달됨\n  const [\n    createAccountMutation,\n    { loading, data: createAccountMutationResult },\n  ] = useMutation<createAccountMutation, createAccountMutationVariables>(\n    CREATE_ACCOUNT_MUTATION,\n    { onCompleted },\n  ); // useMutation으로 받는 첫번째 arg는 mutation function 이고 trigger 역할을 함\n  const onSubmit = () => {\n    if (!loading) {\n      const { email, password, role } = getValues();\n      createAccountMutation({\n        variables: {\n          createAccount: {\n            email,\n            password,\n            role,\n          },\n        },\n      });\n    }\n  };\n  // console.log(watch());\n\n  return (\n    <div className=\"h-screen flex items-center flex-col mt-10 lg:mt-28\">\n      <Helmet>\n        <title>CreateAccount | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm flex flex-col px-5 items-center\">\n        <img src={nuberLogo} alt=\"logoImg\" className=\"w-52 mb-10\" />\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Let's get started\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            ref={register({\n              required: 'Email is required',\n              pattern: {\n                value: EMAIL_REGEX,\n                message: 'Please enter a valid email',\n              },\n            })}\n            required\n            name=\"email\"\n            placeholder=\"Email\"\n            className=\"input\"\n          />\n          {errors.email?.message && (\n            <FormError errorMessage={errors.email?.message} />\n          )}\n          <input\n            ref={register({ required: 'Password is required' })}\n            required\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            className=\"input\"\n          />\n          {errors.password?.message && (\n            <FormError errorMessage={errors.password?.message} />\n          )}\n          <select\n            name=\"role\"\n            ref={register({ required: true })}\n            className=\"input\"\n          >\n            {Object.keys(UserRole).map((role, index) => (\n              <option key={index} className=\"input\">\n                {role}\n              </option>\n            ))}\n          </select>\n          <Button\n            canClick={formState.isValid}\n            loading={loading}\n            actionText=\"Create Account\"\n          />\n          {createAccountMutationResult?.createAccount.error && (\n            <FormError\n              errorMessage={createAccountMutationResult.createAccount.error}\n            />\n          )}\n        </form>\n        <div>\n          Already have an account?{' '}\n          <Link to=\"/\" className=\"text-lime-600 hover:underline\">\n            Log in now\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n",["142","143"],"C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\constants.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx",["144"],"import { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { isLoggedInVar } from '../apollo';\nimport { LOCALSTORAGE_TOKEN } from '../constants';\nimport { useMe } from '../hooks/useMe';\nimport nuberLogo from '../images/logo.svg';\n\nexport const Header: React.FC = () => {\n  const { data } = useMe(); // 이렇게 사용하면 두번 query를 graphql에 요청하는 것 같지만 사실은 apollo cache에 있으면 그것을 가져오기 때문에 한번만 요청함\n  // apollo cache + custom hooks => awesome\n  // console.log(data);\n  return (\n    <>\n      {/* {!data?.me.verified && ( // 나중에 도메인 발급받고 메일건을 재가입 하던 다른 메일러를 써서 붙이자 \n        <div className=\"bg-red-500 p-3 text-center text-base text-white\">\n          <span>Please verify your email</span>\n        </div>\n      )} */}\n      <header className=\"py-4\">\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-xl mx-auto flex justify-between items-center\">\n          <Link to=\"/\">\n            <img src={nuberLogo} alt=\"logoImg\" className=\"w-24\" />\n          </Link>\n          <span\n            onClick={() => {\n              isLoggedInVar(false);\n              localStorage.removeItem(LOCALSTORAGE_TOKEN);\n            }}\n          >\n            Logout\n          </span>\n          <span className=\"text-xs\">\n            <Link to=\"/edit-profile\">\n              <FontAwesomeIcon icon={faUser} className=\"text-xl\" />\n            </Link>\n          </span>\n        </div>\n      </header>\n    </>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx",["145","146","147","148"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from '../../__generated__/verifyEmail';\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const { data: userData, refetch } = useMe();\n  const client = useApolloClient();\n  const history = useHistory();\n  const onCompleted = async (data: verifyEmail) => {\n    const {\n      verifyEmail: { ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      client.writeFragment({\n        id: `User:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      // await refetch();\n      history.push('/');\n    }\n  };\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    },\n  );\n  //   const location = useLocation();\n  useEffect(() => {\n    // 방법 1. window.location.href 에서 url을 가져올 수도 있음\n    // console.log(window.location.href.split(\"code=\")[1]);\n    // 방법 2. router로 부터 가져오기\n    // console.log(location);\n    const [_, code] = window.location.href.split('code=');\n    verifyEmail({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <Helmet>\n        <title>Verify Email | Nuber Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming email...</h2>\n      <h4 className=\"text-gray-700 text-sm\">\n        Please wait, don't close this page...\n      </h4>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx",["149"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { EMAIL_REGEX } from '../../constants';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  editProfile,\n  editProfileVariables,\n} from '../../__generated__/editProfile';\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const EditProfile = () => {\n  const { data: userData, refetch } = useMe();\n  const { register, handleSubmit, getValues, formState } = useForm<IFormProps>({\n    defaultValues: {\n      email: userData?.me.email,\n    },\n    mode: 'onChange',\n  });\n  const client = useApolloClient();\n  const onCompleted = async (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      //update cache\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `User:${id}`,\n          fragment: gql`\n            fragment EditedUser on User {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n      //   await refetch();\n    }\n  };\n  const [editProfile, { loading }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, { onCompleted });\n\n  const onSubmit = () => {\n    // getValues 후 edit profile mutation을 call\n    // 그리고 cache도 update : 나중에 다른 스크린에 필요할 수도 있으므로\n    const { email, password } = getValues();\n    editProfile({\n      variables: {\n        input: {\n          email,\n          ...(password !== '' && { password }), // 아무것도 입력안해서 password에 \"\"들어간 경우 password 항목자체가 없게 해서 \"\"으로 password가 변경되는 것을 막아줌\n        },\n      },\n    });\n  };\n  return (\n    <div className=\"w-full flex flex-col px-5 items-center\">\n      <Helmet>\n        <title>Edit Profile | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm \">\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Edit Profile\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            ref={register({\n              pattern: EMAIL_REGEX,\n            })}\n            name=\"email\"\n            className=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n          <input\n            ref={register}\n            name=\"password\"\n            className=\"input\"\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <Button\n            loading={loading}\n            canClick={formState.isValid}\n            actionText=\"Save Profile\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx",["150","151","152"],"import { gql, useLazyQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Loader from 'react-loader-spinner';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Pagination } from '../../components/pagination';\nimport { Restaurant } from '../../components/restaurant';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  searchRestaurantInput,\n  searchRestaurantInputVariables,\n} from '../../__generated__/searchRestaurantInput';\n\nconst SEARCH_RESTAURANTS = gql`\n  query searchRestaurantInput($input: SearchRestaurantInput!) {\n    searchRestaurantByName(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\nexport const Search = () => {\n  const [page, setPage] = useState(1); // default value : 1\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const location = useLocation();\n  const history = useHistory();\n  // LazyQuery는 조건부 query를 가능하게 함\n  const [callQuery, { loading, data, called }] = useLazyQuery<\n    searchRestaurantInput,\n    searchRestaurantInputVariables\n  >(SEARCH_RESTAURANTS); // callQuery()를 실행해야만 data를 얻을 수 있음\n  useEffect(() => {\n    const [_, query] = location.search.split('?term=');\n    if (!query) {\n      return history.replace('/');\n    }\n    // 방법1. searchTerm을 state로 설정 할 수 있음\n    // 방법2. state설정 없이 Lazy Query를 만드는 것(우리가 할 방법)\n    callQuery({\n      variables: {\n        input: {\n          page,\n          query,\n        },\n      },\n    });\n    // console.log(loading, data, called); // called는 query가 실행됐는지 안됐는지 알려줌\n  }, [page]);\n\n  return (\n    <section className=\"flex w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n      <Helmet>\n        <title>Search | Nuber Eats</title>\n      </Helmet>\n      <nav className=\"hidden md:block min-w-max py-4\">\n        <div className=\"w-64 max-h-screen sticky top-0\">\n          {!loading && (\n            <>\n              <h1 className=\"text-3xl font-semibold\">{`\"${\n                location.search.split('?term=')[1]\n              }\"`}</h1>\n              <h2 className=\"text-base mt-2\">{`${data?.searchRestaurantByName.totalResults} Restaurants`}</h2>\n            </>\n          )}\n          {/* Sort, Price range, ... we will see later */}\n        </div>\n      </nav>\n      <main className=\"w-full\">\n        {loading && (\n          <div className=\"mt-6 mb-4 py-32 flex justify-center\">\n            <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n          </div>\n        )}\n        {!loading && (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-x-5 gap-y-8 py-4\">\n            {data?.searchRestaurantByName.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        )}\n\n        <Pagination\n          page={page}\n          totalPages={data?.searchRestaurantByName.totalPages}\n          onNextPageClick={onNextPageClick}\n          onPrevPageClick={onPrevPageClick}\n        />\n        {/* <div className=\"h-screen\">sticky 확인용 div</div> */}\n      </main>\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx",["153","154"],"import { gql, useQuery } from '@apollo/client';\nimport React, { useEffect, useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Loader from 'react-loader-spinner';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { Pagination } from '../../components/pagination';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  categoryQuery,\n  categoryQueryVariables,\n} from '../../__generated__/categoryQuery';\n\nconst CATEGORY_QUERY = gql`\n  query categoryQuery($input: CategoryInput!) {\n    category(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n      category {\n        ...CategoryParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n  ${CATEGORY_FRAGMENT}\n`;\n\ninterface ICategoryParams {\n  slug: string;\n}\n\nexport const Category = () => {\n  //   const location = useLocation(); // router에서 /:slug 를 붙여서 parameter를 가져올 수 있으므로 useParams를 쓰는게 더 좋음\n  //   useEffect(() => {\n  //     console.log(location);\n  //   }, [location]);\n  const params = useParams<ICategoryParams>();\n  const [page, setPage] = useState(1); // default value : 1\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const { data, loading } = useQuery<categoryQuery, categoryQueryVariables>(\n    CATEGORY_QUERY,\n    {\n      variables: {\n        input: {\n          page,\n          slug: params.slug,\n        },\n      },\n    },\n  );\n  console.log(data);\n  //\n  return (\n    <section className=\"flex w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n      <Helmet>\n        <title>Category | Nuber Eats</title>\n      </Helmet>\n      <nav className=\"hidden md:block min-w-max py-4\">\n        <div className=\"w-64 max-h-screen sticky top-0\">\n          {data?.category.category && (\n            <>\n              <h1 className=\"text-3xl font-semibold\">{`\"${data.category.category.name}\"`}</h1>\n              <h2 className=\"text-base mt-2\">{`${data.category.category.restaurantCount} Restaurants`}</h2>\n            </>\n          )}\n          {/* Sort, Price range, ... we will see later */}\n        </div>\n      </nav>\n      <main className=\"w-full\">\n        {loading && (\n          <div className=\"mt-6 mb-4 py-32 flex justify-center\">\n            <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n          </div>\n        )}\n        {!loading && (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-x-5 gap-y-8 py-4\">\n            {data?.category.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        )}\n\n        <Pagination\n          page={page}\n          totalPages={data?.category.totalPages}\n          onNextPageClick={onNextPageClick}\n          onPrevPageClick={onPrevPageClick}\n        />\n        {/* <div className=\"h-screen\">sticky 확인용 div</div> */}\n      </main>\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\fragment.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx",["155","156","157"],"import { gql, useQuery } from '@apollo/client';\nimport {\n  faCaretSquareLeft,\n  faCaretSquareRight,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Categories } from '../../components/categories';\nimport { Restaurant } from '../../components/restaurant';\nimport { CATEGORY_FRAGMENT, RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  restaurantsPageQuery,\n  restaurantsPageQueryVariables,\n} from '../../__generated__/restaurantsPageQuery';\nimport Loader from 'react-loader-spinner';\nimport { allCategoriesQuery } from '../../__generated__/allCategoriesQuery';\nimport { Pagination } from '../../components/pagination';\n\nconst CATEGORIES_QUERY = gql`\n  query allCategoriesQuery {\n    allCategories {\n      ok\n      error\n      categories {\n        ...CategoryParts\n      }\n    }\n  }\n  ${CATEGORY_FRAGMENT}\n`;\n\nconst RESTAURANTS_QUERY = gql`\n  query restaurantsPageQuery($input: RestaurantsInput!) {\n    seeRestaurantsByPage(input: $input) {\n      ok\n      error\n      totalPages\n      totalResults\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\ninterface IFormProps {\n  searchTerm: string;\n}\nexport const Restaurants = () => {\n  const [page, setPage] = useState(1); // default value : 1\n\n  const {\n    data: allCategories,\n    loading: loadingCategories,\n  } = useQuery<allCategoriesQuery>(CATEGORIES_QUERY);\n\n  const { data, loading } = useQuery<\n    restaurantsPageQuery,\n    restaurantsPageQueryVariables\n  >(RESTAURANTS_QUERY, {\n    variables: {\n      input: {\n        // 우리가 state(page)를 변경하면 Query는 state에 depend하기 때문에 Query의 variable또한 바뀜 => re-render\n        page, // page: page(from state hook)\n      },\n    },\n  });\n  //   console.log(data);\n  const onNextPageClick = () => setPage(current => current + 1); // setState():setPage 에서 argument:current는 현재 state:page임\n  const onPrevPageClick = () => setPage(current => current - 1);\n  const { register, handleSubmit, getValues } = useForm<IFormProps>();\n  const history = useHistory(); // for redirect\n\n  const onSearchSubmit = () => {\n    const { searchTerm } = getValues();\n    history.push({\n      pathname: '/search',\n      search: `?term=${searchTerm}`,\n      //   state: {\n      //     searchTerm, // 이런식으로 url에 노출시키지 않고 원하는 데이터를 보낼 수 있음 : 브라우저 메모리에 저장하기 때문에 새로고침해도 state에 남아 있음\n      //   },\n    });\n  };\n\n  return (\n    <section>\n      <Helmet>\n        <title>Home | Nuber Eats</title>\n      </Helmet>\n      <form\n        onSubmit={handleSubmit(onSearchSubmit)}\n        className=\"bg-gray-800 w-full py-20 flex items-center justify-center px-5\"\n      >\n        <input\n          ref={register({ required: true })}\n          name=\"searchTerm\"\n          type=\"Search\"\n          className=\"input w-full max-w-screen-sm rounded-md border-0\"\n          placeholder=\"Search restaurants...\"\n        />\n      </form>\n      {loadingCategories && (\n        <div className=\"py-10 flex justify-center\">\n          <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n        </div>\n      )}\n      {!loadingCategories && (\n        <div className=\"px-5 xl:px-0 max-w-screen-2xl mx-auto\">\n          <div className=\"flex justify-around max-w-sm mx-auto mt-8 \">\n            {allCategories?.allCategories.categories?.map(category => (\n              <Link key={category.id} to={`/category/${category.slug}`}>\n                <Categories\n                  key={category.id}\n                  id={category.id + ''}\n                  coverImage={\n                    category.coverImage ? category.coverImage : undefined\n                  }\n                  name={category.name}\n                />\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n      {loading && (\n        <div className=\"mt-12 py-32 flex justify-center\">\n          <Loader type=\"TailSpin\" color=\"gray\" height={40} width={40} />\n        </div>\n      )}\n      {!loading && (\n        <div className=\"px-5 xl:px-0 max-w-screen-xl mx-auto w-full\">\n          <div className=\"grid md:grid-cols-3 gap-x-5 gap-y-10 mt-10\">\n            {data?.seeRestaurantsByPage.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      <Pagination\n        page={page}\n        totalPages={data?.seeRestaurantsByPage.totalPages}\n        onNextPageClick={onNextPageClick}\n        onPrevPageClick={onPrevPageClick}\n      />\n    </section>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx",["158"],"import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  restaurantDetailQuery,\n  restaurantDetailQueryVariables,\n} from '../../__generated__/restaurantDetailQuery';\n\nconst RESTAURANT_QUERY = gql`\n  query restaurantDetailQuery($input: RestaurantInput!) {\n    findRestaurantById(input: $input) {\n      ok\n      error\n      restaurant {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IRestaurantParams {\n  id: string;\n}\n\nexport const RestaurantDetail = () => {\n  const params = useParams<IRestaurantParams>();\n  const { loading, data } = useQuery<\n    restaurantDetailQuery,\n    restaurantDetailQueryVariables\n  >(RESTAURANT_QUERY, {\n    variables: {\n      input: {\n        restaurantId: +params.id, // parseInt(params.id),\n      },\n    },\n  });\n  console.log(data);\n  return (\n    <div>\n      <div\n        className=\"bg-gray-300 bg-center bg-cover py-32 md:py-40 lg:py-52\"\n        style={{\n          backgroundImage: `url(${data?.findRestaurantById.restaurant?.coverImage})`,\n        }}\n      >\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n          <div className=\"max-w-screen-sm py-4 text-white\">\n            <h4 className=\"text-4xl mb-2\">\n              {data?.findRestaurantById.restaurant?.name}\n            </h4>\n            <h5>{data?.findRestaurantById.restaurant?.category?.name}</h5>\n            <h5>{data?.findRestaurantById.restaurant?.address}</h5>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\app.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurants.tsx",["159","160"],"import { gql, useApolloClient, useQuery } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router-dom';\nimport { Restaurant } from '../../components/restaurant';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport { myRestaurants } from '../../__generated__/myRestaurants';\n\nexport const MY_RESTAURANTS_QUERY = gql`\n  query myRestaurants {\n    myRestaurants {\n      ok\n      error\n      restaurants {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\n// Owner입장에서 자신의 음식점을 보고 싶을 때 오는 곳\nexport const MyRestaurants = () => {\n  const { data } = useQuery<myRestaurants>(MY_RESTAURANTS_QUERY);\n  //   console.log(data);\n  return (\n    <div>\n      <Helmet>\n        <title>My Restaurants | Nuber Eats</title>\n      </Helmet>\n      <div className=\"px-5 xl:px-0 max-w-screen-xl mx-auto mt-32\">\n        <h2 className=\"text-4xl font-medium mb-10\">My Restaurants</h2>\n        <Link className=\"text-lime-600 hover:underline\" to=\"/add-restaurant\">\n          Create one &rarr;\n        </Link>\n        {data?.myRestaurants.ok &&\n        data.myRestaurants.restaurants.length === 0 ? (\n          <>\n            <h4 className=\"text-xl mb-5\">You have no restaurants.</h4>\n            <Link\n              className=\"text-lime-600 hover:underline\"\n              to=\"/add-restaurant\"\n            >\n              Create one &rarr;\n            </Link>\n          </>\n        ) : (\n          <div className=\"grid md:grid-cols-3 gap-x-5 gap-y-10 mt-10\">\n            {data?.myRestaurants.restaurants?.map(restaurant => (\n              <Restaurant\n                key={restaurant.id}\n                id={restaurant.id + ''}\n                coverImage={restaurant.coverImage}\n                name={restaurant.name}\n                categoryName={restaurant.category?.name}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-restaurants.tsx",["161","162","163"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React, { useState } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '../../components/button';\nimport { FormError } from '../../components/form-error';\nimport { createAccountMutationVariables } from '../../__generated__/createAccountMutation';\nimport {\n  createRestaurantMutation,\n  createRestaurantMutationVariables,\n} from '../../__generated__/createRestaurantMutation';\nimport { MY_RESTAURANTS_QUERY } from './my-restaurants';\n\nconst CREATE_RESTAURANT_MUTATION = gql`\n  mutation createRestaurantMutation($input: CreateRestaurantInput!) {\n    createRestaurant(input: $input) {\n      ok\n      error\n      restaurantId\n    }\n  }\n`;\n\ninterface IFormProps {\n  // input의 name값은 IFormProp의 키와 같아야 함\n  name: string;\n  address: string;\n  categoryName: string;\n  file: FileList;\n}\n\n// query를 먼저 가져와서 전체적인 그림을 파악 한 후 make component detail\nexport const AddRestaurant = () => {\n  const client = useApolloClient();\n  const history = useHistory();\n  const [imageUrl, setImageUrl] = useState('');\n  const onCompleted = (data: createRestaurantMutation) => {\n    const {\n      createRestaurant: { ok, restaurantId },\n    } = data;\n    if (ok) {\n      const { file, name, categoryName, address } = getValues();\n      setUploading(false);\n      // fake\n\n      const queryResult = client.readQuery({\n        query: MY_RESTAURANTS_QUERY,\n      });\n      client.writeQuery({\n        query: MY_RESTAURANTS_QUERY,\n        data: {\n          myRestaurants: {\n            ...queryResult.myRestaurants, // 이 조건때문에 반드시 my-restaurant page에서 캐시를 얻어와야 함\n            restaurants: [\n              {\n                address,\n                category: {\n                  name: categoryName,\n                  __typename: 'Category',\n                },\n                coverImage: imageUrl,\n                id: restaurantId,\n                isPromoted: false,\n                name,\n                __typename: 'Restaurant',\n              },\n              ...queryResult.myRestaurants.restaurants,\n            ],\n          },\n        },\n      });\n\n      history.push('/');\n    }\n  };\n  const [callCreateRestaurantMutation, { data }] = useMutation<\n    createRestaurantMutation,\n    createRestaurantMutationVariables\n  >(CREATE_RESTAURANT_MUTATION, {\n    onCompleted,\n    // refetchQueries: [{ query: MY_RESTAURANTS_QUERY }], // mutation 작업이 성공적으로 끝나면 자동으로 refetch(apollo cache update)\n  });\n\n  const {\n    register,\n    getValues,\n    formState,\n    errors,\n    handleSubmit,\n  } = useForm<IFormProps>({\n    mode: 'onChange',\n  });\n  const [uploading, setUploading] = useState(false); // file upload 후 json을 받는 것 까지 button의 loading상태가 기다리도록 하기 위함\n  const onSubmit = async () => {\n    try {\n      setUploading(true);\n      const { file, name, categoryName, address } = getValues();\n      const actualFile = file[0]; // file은 list로 여러개 file이 존재함\n      const formBody = new FormData();\n      formBody.append('file', actualFile);\n      const { fileUrl: coverImage } = await (\n        await fetch('http://localhost:4000/uploads/', {\n          method: 'POST',\n          body: formBody,\n        })\n      ).json();\n      setImageUrl(coverImage);\n      //   console.log(fileUrl);\n      // url을 갖고 있으니 mutation을 완전하게 작성할 수 있음\n      callCreateRestaurantMutation({\n        variables: {\n          input: {\n            name,\n            coverImage,\n            address,\n            categoryName,\n          },\n        },\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <div className=\"container flex flex-col items-center mt-52\">\n      <Helmet>\n        <title>Add Restaurant | Nuber Eats</title>\n      </Helmet>\n      <h1 className=\"font-semibold text-2xl mb-3\">Add Restaurant</h1>\n      <form\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"grid max-w-screen-sm gap-3 mt-5 w-full mb-5\"\n      >\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          ref={register({ required: 'Name is required.' })}\n        />\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"address\"\n          placeholder=\"Address\"\n          ref={register({ required: 'Address is required.' })}\n        />\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"categoryName\"\n          placeholder=\"Category name\"\n          ref={register({ required: 'Category name is required.' })}\n        />\n        <div>\n          <input\n            type=\"file\"\n            name=\"file\"\n            accept=\"image/*\"\n            ref={register({ required: true })}\n          />\n        </div>\n        <Button\n          loading={uploading} // loading is only from mutation -> onCompleted가 다 될때까지 기다리게 해야함\n          canClick={formState.isValid}\n          actionText=\"Create Restaurant\"\n        />\n        {data?.createRestaurant.error && (\n          <FormError errorMessage={data.createRestaurant.error} />\n        )}\n      </form>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\my-restaurant.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\owner\\add-dish.tsx",[],{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"164","replacedBy":"170"},{"ruleId":"166","replacedBy":"171"},{"ruleId":"164","replacedBy":"172"},{"ruleId":"166","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":37,"column":5,"nodeType":"176","messageId":"177","endLine":37,"endColumn":10},{"ruleId":"164","replacedBy":"178"},{"ruleId":"166","replacedBy":"179"},{"ruleId":"174","severity":1,"message":"180","line":11,"column":11,"nodeType":"176","messageId":"177","endLine":11,"endColumn":15},{"ruleId":"174","severity":1,"message":"181","line":4,"column":22,"nodeType":"176","messageId":"177","endLine":4,"endColumn":33},{"ruleId":"174","severity":1,"message":"182","line":21,"column":27,"nodeType":"176","messageId":"177","endLine":21,"endColumn":34},{"ruleId":"174","severity":1,"message":"183","line":56,"column":12,"nodeType":"176","messageId":"177","endLine":56,"endColumn":13},{"ruleId":"184","severity":1,"message":"185","line":64,"column":6,"nodeType":"186","endLine":64,"endColumn":8,"suggestions":"187"},{"ruleId":"174","severity":1,"message":"182","line":28,"column":27,"nodeType":"176","messageId":"177","endLine":28,"endColumn":34},{"ruleId":"174","severity":1,"message":"188","line":36,"column":38,"nodeType":"176","messageId":"177","endLine":36,"endColumn":44},{"ruleId":"174","severity":1,"message":"183","line":41,"column":12,"nodeType":"176","messageId":"177","endLine":41,"endColumn":13},{"ruleId":"184","severity":1,"message":"189","line":56,"column":6,"nodeType":"186","endLine":56,"endColumn":12,"suggestions":"190"},{"ruleId":"174","severity":1,"message":"191","line":2,"column":17,"nodeType":"176","messageId":"177","endLine":2,"endColumn":26},{"ruleId":"174","severity":1,"message":"181","line":5,"column":10,"nodeType":"176","messageId":"177","endLine":5,"endColumn":21},{"ruleId":"174","severity":1,"message":"192","line":3,"column":3,"nodeType":"176","messageId":"177","endLine":3,"endColumn":20},{"ruleId":"174","severity":1,"message":"193","line":4,"column":3,"nodeType":"176","messageId":"177","endLine":4,"endColumn":21},{"ruleId":"174","severity":1,"message":"194","line":6,"column":10,"nodeType":"176","messageId":"177","endLine":6,"endColumn":25},{"ruleId":"174","severity":1,"message":"195","line":29,"column":11,"nodeType":"176","messageId":"177","endLine":29,"endColumn":18},{"ruleId":"174","severity":1,"message":"196","line":1,"column":15,"nodeType":"176","messageId":"177","endLine":1,"endColumn":30},{"ruleId":"174","severity":1,"message":"191","line":2,"column":17,"nodeType":"176","messageId":"177","endLine":2,"endColumn":26},{"ruleId":"174","severity":1,"message":"197","line":8,"column":10,"nodeType":"176","messageId":"177","endLine":8,"endColumn":40},{"ruleId":"174","severity":1,"message":"198","line":43,"column":15,"nodeType":"176","messageId":"177","endLine":43,"endColumn":19},{"ruleId":"174","severity":1,"message":"199","line":89,"column":5,"nodeType":"176","messageId":"177","endLine":89,"endColumn":11},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],["200"],["201"],["200"],["201"],["200"],["201"],"@typescript-eslint/no-unused-vars","'watch' is assigned a value but never used.","Identifier","unusedVar",["200"],["201"],"'data' is assigned a value but never used.","'useLocation' is defined but never used.","'refetch' is assigned a value but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","ArrayExpression",["202"],"'called' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callQuery', 'history', and 'location.search'. Either include them or remove the dependency array.",["203"],"'useEffect' is defined but never used.","'faCaretSquareLeft' is defined but never used.","'faCaretSquareRight' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'loading' is assigned a value but never used.","'useApolloClient' is defined but never used.","'createAccountMutationVariables' is defined but never used.","'file' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [verifyEmail]",{"range":"208","text":"209"},"Update the dependencies array to be: [callQuery, history, location.search, page]",{"range":"210","text":"211"},[1617,1619],"[verifyEmail]",[1819,1825],"[callQuery, history, location.search, page]"]