[{"C:\\github\\nuber-eats-frontend\\src\\App.tsx":"1","C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts":"2","C:\\github\\nuber-eats-frontend\\src\\index.tsx":"3","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx":"4","C:\\github\\nuber-eats-frontend\\src\\apollo.ts":"5","C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx":"6","C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx":"7","C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx":"8","C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx":"9","C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx":"10","C:\\github\\nuber-eats-frontend\\src\\constants.ts":"11","C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx":"12","C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx":"13","C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx":"14","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx":"15","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx":"16","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx":"17","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx":"18","C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx":"19","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx":"20","C:\\github\\nuber-eats-frontend\\src\\fragment.ts":"21","C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts":"22","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx":"23","C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx":"24","C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx":"25"},{"size":853,"mtime":1611588922528,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1611520125186,"results":"28","hashOfConfig":"27"},{"size":828,"mtime":1611923798615,"results":"29","hashOfConfig":"27"},{"size":641,"mtime":1611688050087,"results":"30","hashOfConfig":"27"},{"size":1518,"mtime":1611685048420,"results":"31","hashOfConfig":"27"},{"size":1657,"mtime":1611862457072,"results":"32","hashOfConfig":"27"},{"size":4139,"mtime":1611777596643,"results":"33","hashOfConfig":"27"},{"size":4844,"mtime":1611777566880,"results":"34","hashOfConfig":"27"},{"size":318,"mtime":1611589323690,"results":"35","hashOfConfig":"27"},{"size":485,"mtime":1611668239414,"results":"36","hashOfConfig":"27"},{"size":228,"mtime":1611777499861,"results":"37","hashOfConfig":"27"},{"size":582,"mtime":1611831445403,"results":"38","hashOfConfig":"27"},{"size":1639,"mtime":1611780874860,"results":"39","hashOfConfig":"27"},{"size":281,"mtime":1611692320697,"results":"40","hashOfConfig":"27"},{"size":2019,"mtime":1611831488074,"results":"41","hashOfConfig":"27"},{"size":3240,"mtime":1611831458001,"results":"42","hashOfConfig":"27"},{"size":824,"mtime":1611862534335,"results":"43","hashOfConfig":"27"},{"size":3664,"mtime":1612010175286,"results":"44","hashOfConfig":"27"},{"size":521,"mtime":1611858079596,"results":"45","hashOfConfig":"27"},{"size":3365,"mtime":1612002430417,"results":"46","hashOfConfig":"27"},{"size":364,"mtime":1611860050449,"results":"47","hashOfConfig":"27"},{"size":1139,"mtime":1611944168216,"results":"48","hashOfConfig":"27"},{"size":5030,"mtime":1612002502994,"results":"49","hashOfConfig":"27"},{"size":1616,"mtime":1611866406526,"results":"50","hashOfConfig":"27"},{"size":1144,"mtime":1612002336852,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"npjdl",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\github\\nuber-eats-frontend\\src\\App.tsx",[],["111","112"],"C:\\github\\nuber-eats-frontend\\src\\reportWebVitals.ts",[],["113","114"],"C:\\github\\nuber-eats-frontend\\src\\index.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-out-router.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\apollo.ts",[],["115","116"],"C:\\github\\nuber-eats-frontend\\src\\routers\\logged-in-router.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\login.tsx",[],["117","118"],"C:\\github\\nuber-eats-frontend\\src\\pages\\create-account.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\form-error.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\button.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\constants.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\404.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\components\\header.tsx",["119"],"import { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { isLoggedInVar } from '../apollo';\nimport { LOCALSTORAGE_TOKEN } from '../constants';\nimport { useMe } from '../hooks/useMe';\nimport nuberLogo from '../images/logo.svg';\n\nexport const Header: React.FC = () => {\n  const { data } = useMe(); // 이렇게 사용하면 두번 query를 graphql에 요청하는 것 같지만 사실은 apollo cache에 있으면 그것을 가져오기 때문에 한번만 요청함\n  // apollo cache + custom hooks => awesome\n  return (\n    <>\n      {/* {!data?.me.verified && ( // 나중에 도메인 발급받고 메일건을 재가입 하던 다른 메일러를 써서 붙이자 \n        <div className=\"bg-red-500 p-3 text-center text-base text-white\">\n          <span>Please verify your email</span>\n        </div>\n      )} */}\n      <header className=\"py-4\">\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-xl mx-auto flex justify-between items-center\">\n          <Link to=\"/\">\n            <img src={nuberLogo} alt=\"logoImg\" className=\"w-24\" />\n          </Link>\n          <span\n            onClick={() => {\n              isLoggedInVar(false);\n              localStorage.removeItem(LOCALSTORAGE_TOKEN);\n            }}\n          >\n            Logout\n          </span>\n          <span className=\"text-xs\">\n            <Link to=\"/edit-profile/\">\n              <FontAwesomeIcon icon={faUser} className=\"text-xl\" />\n            </Link>\n          </span>\n        </div>\n      </header>\n    </>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\hooks\\useMe.tsx",[],["120","121"],"C:\\github\\nuber-eats-frontend\\src\\pages\\user\\confirm-email.tsx",["122","123","124","125"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  verifyEmail,\n  verifyEmailVariables,\n} from '../../__generated__/verifyEmail';\n\nconst VERIFY_EMAIL_MUTATION = gql`\n  mutation verifyEmail($input: VerifyEmailInput!) {\n    verifyEmail(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const ConfirmEmail = () => {\n  const { data: userData, refetch } = useMe();\n  const client = useApolloClient();\n  const history = useHistory();\n  const onCompleted = async (data: verifyEmail) => {\n    const {\n      verifyEmail: { ok },\n    } = data;\n    if (ok && userData?.me.id) {\n      client.writeFragment({\n        id: `User:${userData.me.id}`,\n        fragment: gql`\n          fragment VerifiedUser on User {\n            verified\n          }\n        `,\n        data: {\n          verified: true,\n        },\n      });\n      // await refetch();\n      history.push('/');\n    }\n  };\n  const [verifyEmail] = useMutation<verifyEmail, verifyEmailVariables>(\n    VERIFY_EMAIL_MUTATION,\n    {\n      onCompleted,\n    },\n  );\n  //   const location = useLocation();\n  useEffect(() => {\n    // 방법 1. window.location.href 에서 url을 가져올 수도 있음\n    // console.log(window.location.href.split(\"code=\")[1]);\n    // 방법 2. router로 부터 가져오기\n    // console.log(location);\n    const [_, code] = window.location.href.split('code=');\n    verifyEmail({\n      variables: {\n        input: {\n          code,\n        },\n      },\n    });\n  }, []);\n  return (\n    <div className=\"mt-52 flex flex-col items-center justify-center\">\n      <Helmet>\n        <title>Verify Email | Nuber Eats</title>\n      </Helmet>\n      <h2 className=\"text-lg mb-1 font-medium\">Confirming email...</h2>\n      <h4 className=\"text-gray-700 text-sm\">\n        Please wait, don't close this page...\n      </h4>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\pages\\user\\edit-profile.tsx",["126"],"import { gql, useApolloClient, useMutation } from '@apollo/client';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useForm } from 'react-hook-form';\nimport { Button } from '../../components/button';\nimport { EMAIL_REGEX } from '../../constants';\nimport { useMe } from '../../hooks/useMe';\nimport {\n  editProfile,\n  editProfileVariables,\n} from '../../__generated__/editProfile';\n\ninterface IFormProps {\n  email?: string;\n  password?: string;\n}\n\nconst EDIT_PROFILE_MUTATION = gql`\n  mutation editProfile($input: EditProfileInput!) {\n    editProfile(input: $input) {\n      ok\n      error\n    }\n  }\n`;\n\nexport const EditProfile = () => {\n  const { data: userData, refetch } = useMe();\n  const { register, handleSubmit, getValues, formState } = useForm<IFormProps>({\n    defaultValues: {\n      email: userData?.me.email,\n    },\n    mode: 'onChange',\n  });\n  const client = useApolloClient();\n  const onCompleted = async (data: editProfile) => {\n    const {\n      editProfile: { ok },\n    } = data;\n    if (ok && userData) {\n      //update cache\n      const {\n        me: { email: prevEmail, id },\n      } = userData;\n      const { email: newEmail } = getValues();\n      if (prevEmail !== newEmail) {\n        client.writeFragment({\n          id: `User:${id}`,\n          fragment: gql`\n            fragment EditedUser on User {\n              verified\n              email\n            }\n          `,\n          data: {\n            email: newEmail,\n            verified: false,\n          },\n        });\n      }\n      //   await refetch();\n    }\n  };\n  const [editProfile, { loading }] = useMutation<\n    editProfile,\n    editProfileVariables\n  >(EDIT_PROFILE_MUTATION, { onCompleted });\n\n  const onSubmit = () => {\n    // getValues 후 edit profile mutation을 call\n    // 그리고 cache도 update : 나중에 다른 스크린에 필요할 수도 있으므로\n    const { email, password } = getValues();\n    editProfile({\n      variables: {\n        input: {\n          email,\n          ...(password !== '' && { password }), // 아무것도 입력안해서 password에 \"\"들어간 경우 password 항목자체가 없게 해서 \"\"으로 password가 변경되는 것을 막아줌\n        },\n      },\n    });\n  };\n  return (\n    <div className=\"w-full flex flex-col px-5 items-center\">\n      <Helmet>\n        <title>Edit Profile | Nuber Eats</title>\n      </Helmet>\n      <div className=\"w-full max-w-screen-sm \">\n        <h4 className=\"w-full font-medium text-left text-3xl mb-5\">\n          Edit Profile\n        </h4>\n        <form\n          onSubmit={handleSubmit(onSubmit)}\n          className=\"grid gap-3 mt-5 w-full mb-5\"\n        >\n          <input\n            ref={register({\n              pattern: EMAIL_REGEX,\n            })}\n            name=\"email\"\n            className=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n          <input\n            ref={register}\n            name=\"password\"\n            className=\"input\"\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <Button\n            loading={loading}\n            canClick={formState.isValid}\n            actionText=\"Save Profile\"\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\restaurant.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\search.tsx",["127","128","129"],"C:\\github\\nuber-eats-frontend\\src\\components\\categories.tsx",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\category.tsx",["130","131"],"C:\\github\\nuber-eats-frontend\\src\\fragment.ts",[],"C:\\github\\nuber-eats-frontend\\src\\__generated__\\globalTypes.ts",[],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurants.tsx",["132","133","134"],"C:\\github\\nuber-eats-frontend\\src\\pages\\client\\restaurant.tsx",["135"],"import { gql, useQuery } from '@apollo/client';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RESTAURANT_FRAGMENT } from '../../fragment';\nimport {\n  restaurantDetailQuery,\n  restaurantDetailQueryVariables,\n} from '../../__generated__/restaurantDetailQuery';\n\nconst RESTAURANT_QUERY = gql`\n  query restaurantDetailQuery($input: RestaurantInput!) {\n    findRestaurantById(input: $input) {\n      ok\n      error\n      restaurant {\n        ...RestaurantParts\n      }\n    }\n  }\n  ${RESTAURANT_FRAGMENT}\n`;\n\ninterface IRestaurantParams {\n  id: string;\n}\n\nexport const RestaurantDetail = () => {\n  const params = useParams<IRestaurantParams>();\n  const { loading, data } = useQuery<\n    restaurantDetailQuery,\n    restaurantDetailQueryVariables\n  >(RESTAURANT_QUERY, {\n    variables: {\n      input: {\n        restaurantId: +params.id, // parseInt(params.id),\n      },\n    },\n  });\n  console.log(data);\n  return (\n    <div>\n      <div\n        className=\"bg-gray-300 bg-center bg-cover py-32 md:py-40 lg:py-52\"\n        style={{\n          backgroundImage: `url(${data?.findRestaurantById.restaurant?.coverImage})`,\n        }}\n      >\n        <div className=\"w-full px-5 xl:px-0 max-w-screen-xl mx-auto\">\n          <div className=\"max-w-screen-sm py-4 text-white\">\n            <h4 className=\"text-4xl mb-2\">\n              {data?.findRestaurantById.restaurant?.name}\n            </h4>\n            <h5>{data?.findRestaurantById.restaurant?.category?.name}</h5>\n            <h5>{data?.findRestaurantById.restaurant?.address}</h5>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","C:\\github\\nuber-eats-frontend\\src\\components\\pagination.tsx",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"136","replacedBy":"140"},{"ruleId":"138","replacedBy":"141"},{"ruleId":"136","replacedBy":"142"},{"ruleId":"138","replacedBy":"143"},{"ruleId":"136","replacedBy":"144"},{"ruleId":"138","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":11,"column":11,"nodeType":"148","messageId":"149","endLine":11,"endColumn":15},{"ruleId":"136","replacedBy":"150"},{"ruleId":"138","replacedBy":"151"},{"ruleId":"146","severity":1,"message":"152","line":4,"column":22,"nodeType":"148","messageId":"149","endLine":4,"endColumn":33},{"ruleId":"146","severity":1,"message":"153","line":21,"column":27,"nodeType":"148","messageId":"149","endLine":21,"endColumn":34},{"ruleId":"146","severity":1,"message":"154","line":56,"column":12,"nodeType":"148","messageId":"149","endLine":56,"endColumn":13},{"ruleId":"155","severity":1,"message":"156","line":64,"column":6,"nodeType":"157","endLine":64,"endColumn":8,"suggestions":"158"},{"ruleId":"146","severity":1,"message":"153","line":28,"column":27,"nodeType":"148","messageId":"149","endLine":28,"endColumn":34},{"ruleId":"146","severity":1,"message":"159","line":36,"column":38,"nodeType":"148","messageId":"149","endLine":36,"endColumn":44},{"ruleId":"146","severity":1,"message":"154","line":41,"column":12,"nodeType":"148","messageId":"149","endLine":41,"endColumn":13},{"ruleId":"155","severity":1,"message":"160","line":56,"column":6,"nodeType":"157","endLine":56,"endColumn":12,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"162","line":2,"column":17,"nodeType":"148","messageId":"149","endLine":2,"endColumn":26},{"ruleId":"146","severity":1,"message":"152","line":5,"column":10,"nodeType":"148","messageId":"149","endLine":5,"endColumn":21},{"ruleId":"146","severity":1,"message":"163","line":3,"column":3,"nodeType":"148","messageId":"149","endLine":3,"endColumn":20},{"ruleId":"146","severity":1,"message":"164","line":4,"column":3,"nodeType":"148","messageId":"149","endLine":4,"endColumn":21},{"ruleId":"146","severity":1,"message":"165","line":6,"column":10,"nodeType":"148","messageId":"149","endLine":6,"endColumn":25},{"ruleId":"146","severity":1,"message":"166","line":29,"column":11,"nodeType":"148","messageId":"149","endLine":29,"endColumn":18},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],["167"],["168"],["167"],["168"],["167"],["168"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar",["167"],["168"],"'useLocation' is defined but never used.","'refetch' is assigned a value but never used.","'_' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'verifyEmail'. Either include it or remove the dependency array.","ArrayExpression",["169"],"'called' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callQuery', 'history', and 'location.search'. Either include them or remove the dependency array.",["170"],"'useEffect' is defined but never used.","'faCaretSquareLeft' is defined but never used.","'faCaretSquareRight' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [verifyEmail]",{"range":"175","text":"176"},"Update the dependencies array to be: [callQuery, history, location.search, page]",{"range":"177","text":"178"},[1617,1619],"[verifyEmail]",[1819,1825],"[callQuery, history, location.search, page]"]